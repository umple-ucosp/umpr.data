namespace Common_Behavior;

class Signal
{
	isA Classifier;
}

class Action
{
	isA ModelElement;
	/5/Boolean isAsynchronous;
	0..1 -> * /2/IterationExpression recurrence;
	0..1 -> * /2/ObjectSetExpression target;
	0..1 -> * /2/ActionExpression script;
	* action -- * ActionSequence actionSequence;
	* action -- * Argument actualArgument;
}

class CreateAction
{
	isA Action;
	0..1 -> 1..* Classifier instantiation;
}

class DestroyAction
{
	isA Action;
}

class UninterpretedAction
{
	isA Action;
}

class CallAction
{
	isA Action;
	0..1 -> 1..* Operation operation;
}

class SendAction
{
	isA Action;
	0..1 -> 1..* Signal signal;
}

class ActionSequence
{
	isA Action;
}

class Argument
{
	isA ModelElement;
	0..1 -> 1..* /2/Expression value;
}

class ReturnAction
{
	isA Action;
}

class TerminateAction
{
	isA Action;
}

class Exception
{
	isA Signal;
}

namespace Core;

class Element
{
}

class ModelElement
{
	isA Element;
	/5/String name;
	/2/VisibilityKind visibility;
	/5/Boolean isSpecification;
	* ownedElement -- * Namespace namespace;
}

class GeneralizableElement
{
	isA ModelElement;
	/5/Boolean isRoot;
	/5/Boolean isLeaf;
	/5/Boolean isAbstract;
	1..* child -- * Generalization generalization;
}

class Namespace
{
	isA ModelElement;
}

class Classifier
{
	isA GeneralizableElement ;
	* owner -- * Feature feature;
	* powertype -- * Generalization powertypeRange;
}

class Feature
{
	isA ModelElement;
	/2/ScopeKind ownerScope;
}

class Relationship
{
	isA ModelElement;
}

class BehavioralFeature
{
	isA Feature;
	/5/Boolean isQuery;
	* behavioralFeature -- * Parameter parameter;
}

class Operation
{
	isA BehavioralFeature;
	/2/CallConcurrencyKind concurrency;
	/5/Boolean isRoot;
	/5/Boolean isLeaf;
	/5/Boolean isAbstract;
	/5/String specification;
}

class Parameter
{
	isA ModelElement;
	/2/ParameterDirectionKind kind;
	0..1 -> 1..* Classifier type;
	0..1 -> * /2/Expression defaultValue;
}

class Generalization
{
	isA Relationship;
	/5/String discriminator;
}

namespace Data_Types;

class Multiplicity
{
	0..1 multiplicity -- 1..* /2/MultiplicityRange range;
}

class MultiplicityRange
{
	/5/Integer lower;
	/5/Integer upper;
	0..1 range -- 1..* /2/Multiplicity multiplicity;
}

class Expression
{
	/5/String language;
	/5/String body;
}

class BooleanExpression
{
	isA /2/Expression;
}

class ObjectSetExpression
{
	isA /2/Expression;
}

class ActionExpression
{
	isA /2/Expression;
}

class IterationExpression
{
	isA /2/Expression;
}

class TimeExpression
{
	isA /2/Expression;
}

class ArgListsExpression
{
	isA /2/Expression;
}

namespace State_Machines;

class StateMachine
{
	isA ModelElement;
	0..1 -> * ModelElement context;
	0..1 submachine -- * /3/SubmachineState submachineState;
	0..1 stateMachine -- 1..* /3/State top;
	0..1 stateMachine -- * /3/Transition transitions;
}

class Event
{
	isA ModelElement;
	0..1 -> * Parameter parameter;
}

class StateVertex
{
	isA ModelElement;
	0..1 subvertex -- * /3/CompositeState container;
	0..1 target -- * /3/Transition incoming;
	0..1 source -- * /3/Transition outgoing;
}

class State
{
	isA /3/StateVertex;
	0..1 -> * /3/Event deferrableEvent;
	0..1 -> * /3/Transition internalTransition;
	0..1 -> * Action exit;
	0..1 -> * Action doActivity;
	0..1 -> * Action entry;
	0..1 top -- * /3/StateMachine stateMachine;
}

class TimeEvent
{
	isA /3/Event;
	0..1 -> 1..* /2/TimeExpression when;
}

class CallEvent
{
	isA /3/Event;
	0..1 -> 1..* Operation operation;
}

class SignalEvent
{
	isA /3/Event;
	0..1 -> 1..* Signal signal;
}

class Transition
{
	isA ModelElement;
	0..1 incoming -- 1..* /3/StateVertex target;
	0..1 -> * /3/Event trigger;
	0..1 transitions -- * /3/StateMachine stateMachine;
	0..1 outgoing -- 1..* /3/StateVertex source;
	0..1 -> * Action effect;
	0..1 transition -- * /3/Guard guard;
}

class CompositeState
{
	isA /3/State;
	/5/Boolean isConcurrent;
	0..1 container -- * /3/StateVertex subvertex;
}

class ChangeEvent
{
	isA /3/Event;
	0..1 -> 1..* /2/BooleanExpression changeExpression;
}

class Guard
{
	isA ModelElement;
	0..1 guard -- 1..* /3/Transition transition;
	0..1 -> 1..* /2/BooleanExpression expression;
}

class Pseudostate
{
	isA /3/StateVertex;
	/2/PseudostateKind kind;
}

class SimpleState
{
	isA /3/State;
}

class SubmachineState
{
	isA /3/CompositeState;
	0..1 submachineState -- 1..* /3/StateMachine submachine;
}

class SynchState
{
	isA /3/StateVertex;
	/5/Integer bound;
}

class StubState
{
	isA /3/StateVertex;
	/5/String referenceState;
}

class FinalState
{
	isA /3/State;
}

namespace Activity_Graphs;

class ActivityGraph
{
	isA /3/StateMachine;
	0..1 activityGraph -- * /4/Partition partition;
}

class Partition
{
	isA ModelElement;
	0..1 -> * ModelElement contents;
	0..1 partition -- 1..* /4/ActivityGraph activityGraph;
}

class SubactivityState
{
	isA /3/SubmachineState;
	/5/Boolean isDynamic;
	0..1 -> * /2/ArgListsExpression dynamicArguments;
	0..1 -> * /2/Multiplicity dynamicMultiplicity;
}

class ActionState
{
	isA /3/SimpleState;
	/5/Boolean isDynamic;
	0..1 -> * /2/ArgListsExpression dynamicArguments;
	0..1 -> * /2/Multiplicity dynamicMultiplicity;
}

class CallState
{
	isA /4/ActionState;
}

class ObjectFlowState
{
	isA /3/SimpleState;
	/5/Boolean isSynch;
	0..1 -> 1..* Classifier type;
	0..1 -> * Parameter parameter;
}

class ClassifierInState
{
	isA Classifier;
	0..1 -> 1..* /3/State inState;
	0..1 -> 1..* Classifier type;
}

namespace PrimitiveTypes;

class Boolean
{
}

class Float
{
}

class Integer
{
}

class Long
{
}

class String
{
}

class Double
{
}