namespace PrimitiveTypes;

class String
{
}

class Boolean
{
}

namespace ViewAbstractSyntaxOfXMorphLanguage;

class VarScope
{
	1..* scope -- * AbstractVar var;
}

class AbstractVar
{
	1..* var -- 1..* VarUse varUse;
}

class VarUse
{
	isA Expression;
}

class MOF::Property
{
	* property -- 1..* Key part;
}

class Key
{
	* keys -- 1..* Transformation transformation;
}

class PatternScope
{
	isA VarScope;
	1..* scope -- * PatternDefn patternDefn;
}

class PatternDefn
{
	isA VarScope;
	* patternDefn -- 1..* Term body;
	1..* patternDefn -- * PatternVar parameter;
}

class TRule
{
	isA VarScope;
	* superseder -- * TRule superseded;
	* superseded -- * TRule superseder;
	* extender -- * TRule extended;
	* extended -- * TRule extender;
	* tRule -- 1..* Transformation transformation;
	* tRule -- * Term term;
	* tRuleST -- * SimpleTerm tgt;
}

class Transformation
{
	isA PatternScope;
}

class Query
{
	isA PatternScope;
	* query -- 1..* Term term;
	1..* query -- * PatternVar parameter;
}

class Term
{
	1..* src -- * ExtentVar context;
	1..* term -- * CompoundTerm compoundTerm;
}

class TRuleVar
{
	isA AbstractVar;
	* superseded -- * TRuleVar superseder;
	* superseder -- * TRuleVar superseded;
	* extender -- * TRuleVar extended;
	* extended -- * TRuleVar extender;
}

class PatternVar
{
	isA AbstractVar;
}

class ExtentVar
{
	isA AbstractVar;
}

class CompoundTerm
{
	isA Term;
}

class AndTerm
{
	isA CompoundTerm;
}

class OrTerm
{
	isA CompoundTerm;
}

class NotTerm
{
	isA CompoundTerm;
}

class IfTerm
{
	isA CompoundTerm;
}

class SimpleTerm
{
	isA Term;
	1..* term -- * Expression arg;
}

class TrackingUse
{
	isA SimpleTerm;
	String featureNames;
	* tracking -- 1..* MOF::Class tracking;
}

class MOF::Class
{
}

class PatternUse
{
	isA SimpleTerm;
}

class MofTerm
{
	isA SimpleTerm;
}

class Condition
{
	isA SimpleTerm;
	String reason;
}

class MofInstance
{
	isA MofTerm;
	Boolean isExactly;
	0..1 -> 1..* Expression typeName;
	0..1 -> 1..* Expression instance;
}

class MofOrder
{
	isA MofTerm;
	0..1 lesser -- 1..* Expression lesser;
	0..1 instance -- 1..* Expression instance;
	1..* greater -- 1..* Expression greater;
}

class Expression
{
	* arg -- * CoumpoundExpr expr;
}

class CoumpoundExpr
{
	isA Expression;
}

class CollectionExpr
{
	isA CoumpoundExpr;
	Boolean unique;
	Boolean ordered;
}

class FunctionExpr
{
	isA CoumpoundExpr;
	String function;
}

class FeatureExpr
{
	isA CoumpoundExpr;
	String collect;
	String featureName;
}

class InstanceRef
{
	isA Expression;
	1..* obj -- 1..* MOF::Object obj;
}

class MOF::Object
{
	isA Expression;
}

class SimpleExpr
{
	isA Expression;
	String representation;
}

class StringConstant
{
	isA SimpleExpr;
}

class IntConstant
{
	isA SimpleExpr;
}

class BooleanConstant
{
	isA SimpleExpr;
}

class EnumConstant
{
	isA SimpleExpr;
}